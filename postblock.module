<?php
// $Id$

/**
 * Implementation of hook_theme().
 */
function postblock_theme() {
  return array(
    'postblock' => array(
      'arguments' => array('items' => array()),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function postblock_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks['post'] = array(
      'info' => t('Post content'),
      'weight' => -1,
      'status' => 1,
      'region' => 'right',
      'cache' => BLOCK_CACHE_PER_ROLE,
    );
    return $blocks;
  }
  elseif ($op == 'configure' && $delta == 'post') {
    $form['postblock_hidden_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Hide the following content types'),
      '#default_value' => variable_get('postblock_hidden_types', array()),
      '#options' => node_get_types('names'),
    );
    return $form;
  }
  elseif ($op == 'save' && $delta == 0) {
    variable_set('postblock_hidden_types', $edit['postblock_hidden_types']);
  }
  elseif ($op == 'view' && $delta == 'post') {
    $block = array(
      'subject' => t('Post content'),
      'content' => postblock_generate_block(),
    );
    return $block;
  }
}

/**
 * Generate the contents of the block.
 */
function postblock_generate_block() {
  $hidden_types = variable_get('postblock_hidden_types', array());
  $all_types = node_get_types('types');
  $list = array();

  foreach ($all_types as $key => $value) {
    if (empty($hidden_types[$key]) && node_access('create', $key)) {
      $list[] = $value;
    }
  }
  if (!empty($list)) {
    return theme('postblock', $list);
  }
}

/**
 * Render the links as an un-ordered list.
 */
function theme_postblock($items = array()) {
  $links = array();

  foreach ($items as $item) {
    $item_url = str_replace('_', '-', $item->type);
    $links[] = l(t('Create !type', array('!type' => $item->name)), 'node/add/' . $item_url);
  }

  return theme('item_list', $links, NULL, 'ul', array('id' => 'postblock-items'));
}
